*******link del problema:
https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=375
*******Accepted:
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
int cases, K;
int front[8], side[8];

int search_maximum() {
    int blocks = 0;
    for (int i = 0; i < K; i++)
        for (int j = 0; j < K; j++)
            blocks += min(front[i], side[j]);

    return blocks;
}

int search_minimum() {
    int blocks = 0;
    bool covered_front[8];
    bool covered_side[8];
    for (int i = 0; i < K; i++) {
        covered_front[i] = false;
        covered_side[i] = false;
    }

    for (int i = 0; i < K; i++) {
        for (int j = 0; j < K; j++) {
            if (front[i] == side[j] && !covered_side[j] && !covered_front[i]) {
                blocks += front[i];
                covered_front[i] = true;
                covered_side[j] = true;
            }
        }
    }

    for (int i = 0; i < K; i++) {
        if (!covered_front[i]) blocks += front[i];
        if (!covered_side[i]) blocks += side[i];
    }

    return blocks;
}

int main() {
    cin >> cases;
    while (cases--) {
        cin >> K;
        for (int i = 0; i < K; i++)
            cin >> front[i];
        for (int i = 0; i < K; i++)
            cin >> side[i];
        int min_sol = search_minimum();
        int max_sol = search_maximum();
        printf("Matty needs at least %d blocks, and can add at most %d extra blocks.\n", min_sol, max_sol-min_sol);
    }
    return 0;
}
*******